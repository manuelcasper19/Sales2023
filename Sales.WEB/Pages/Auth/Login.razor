@page "/Login"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

<h3 class="text-center">Iniciar Sesión</h3>

<EditForm Model="loginDTO" OnValidSubmit="LoginAsync">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-md-4  offset-md-4">
            <div class="card bg-light">
                <div class="card-header justify-content-center">
                    <span>
                        <i class="oi oi-account-login" /> Iniciar Sesión
                        <button class="btn btn-sm btn-primary float-end" type="submit"><i class="oi oi-check" /> Iniciar Sesión</button>
                    </span>
                </div>
                <div class="card-body">

                    <div class="mb-3">
                        <label>Email:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@loginDTO.Email" />
                            <ValidationMessage For="@(() => loginDTO.Email)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Contraseña:</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@loginDTO.Password" />
                            <ValidationMessage For="@(() => loginDTO.Password)" />
                        </div>
                    </div>
                    <div class="card-footer d-flex justify-content-between text-center">
                        <a class="btn btn-link" href="/ResendToken">Reenviar correo de activación de cuenta</a>
                        <a class="btn btn-link" href="/RecoverPassword">Olvidé mi contraseña</a>
                    </div>

                </div>
            </div>
        </div>
    </div>
</EditForm>



@code {
    private LoginDTO loginDTO = new();

    private async Task LoginAsync()
    {
        var responseHttp = await repository.Post<LoginDTO, TokenDTO>("/api/accounts/Login", loginDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await loginService.LoginAsync(responseHttp.Response!.Token);
        navigationManager.NavigateTo("/");
    }
}

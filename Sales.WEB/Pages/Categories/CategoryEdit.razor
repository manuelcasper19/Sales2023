@page "/categories/edit/{id:int}"
@inject SweetAlertService sweetAlertService
@inject IRepository repository
@inject NavigationManager navigationManager

@attribute [Authorize(Roles = "Admin")]

@if (category is null)
{
    <div class="spinner" />
}
else
{
    <h3 class="text-center">Editar Categoría </h3>
    <CategoryForm @ref="categoryForm" Category="category" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
    private Category? category;
    private CategoryForm? categoryForm;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public int id { get; set; }

    private async Task EditAsync()
    {
        var responseHttp = await repository.Post("/api/categories", category);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();

    }
    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<Category>($"/api/categories/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/categories");
                return;
            }
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        category = responseHttp.Response;
    }

    private void Return()
    {
        categoryForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/categories");
    }
}

@page "/categories"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3 class="text-center">Categorias</h3>

@*<a class="btn btn-primary mb-2" href="/categories/create">Agregar nueva categoria</a>*@

@if (Categories is null)
{
    <div class="text-center">
        <img src="https://upload.wikimedia.org/wikipedia/commons/c/c7/Loading_2.gif?20170503175831">
    </div>
}
else
{
<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPageAsync" />
<div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
    <div>
        <a class="btn btn-primary" href="/categories/create">Nueva Categoría</a>
    </div>
    <div class="mx-2">
        <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar Categoría..." @bind-value="Filter" />
    </div>
    <div>
        <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filtrar</button>
        <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
    </div>
</div>
<GenericList MyList="Categories">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>#</th>
                        <th style="width:220px">Categoria</th>
                        <th style="width:260px"></th>
                </tr>
            </thead>
            <tbody>
                @{
                    int i = 0;
                }
                @foreach (var category in Categories!)
                {
                    i++;
                    <tr>
                        <td>
                            @i
                        </td>
                        <td>
                            @category.Name
                        </td>   
                        
                        <td>
                            <a class="btn btn-warning" href="/categories/edit/@category.Id">Editar</a>
                            <button class="btn btn-danger" @onclick=@( ()=> DeleteAsync( category.Id ))>Borrar</button>
                        </td>

                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>
}

@code {
    public List<Category>? Categories { get; set; }
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        //var responseHttp = await repository.Get<List<Category>>("/api/categories");
        //Categories = responseHttp.Response;

        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/categories?page={page}";
            url2 = $"api/categories/totalPages";
        }
        else
        {
            url1 = $"api/categories?page={page}&filter={Filter}";
            url2 = $"api/categories/totalPages?filter={Filter}";
        }


        var responseHppt = await repository.Get<List<Category>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);
        Categories = responseHppt.Response!;
        totalPages = responseHppt2.Response!;


    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas eliminar la Categoría?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Sí"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/categories/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var messsage = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", messsage, SweetAlertIcon.Error);
                return;
            }

        }
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }
    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }
}

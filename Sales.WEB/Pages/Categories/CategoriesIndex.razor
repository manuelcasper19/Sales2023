@page "/categories"

@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin")]

<h3 class="text-center">Categorias</h3>


@if (Categories is null)
{
    <div class="spinner" />
}
else
{
    <Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPageAsync" />

    <div class="card">
        <div class="card-header d-flex justify-content-center align-items-center">
            <div class="col-6 text-end">
                <i class="oi oi-globe"></i> Categorias
            </div>

            <div class="col-6">
                <a class="btn btn-sm btn-primary float-end" @onclick=@(() => ShowModal())><i class="oi oi-plus"></i> Adicionar Categorias</a>
            </div>
        </div>
        <div class="card-body">

            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                <div>
                    <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar Categoría..." @bind-value="Filter" />
                </div>
                <div class="mx-1">
                    <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                </div>
            </div>
            <GenericList MyList="Categories">

                <Body>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th style="width:220px">Categoria</th>
                                <th style="width:260px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int i = 0;
                            }
                            @foreach (var category in Categories!)
                            {
                                i++;
                                <tr>
                                    <td>
                                        @i
                                    </td>
                                    <td>
                                        @category.Name
                                    </td>

                                    <td>
                                        @*      <a class="btn btn-warning" href="/categories/edit/@category.Id">Editar</a>
                                <button class="btn btn-danger" @onclick=@( ()=> DeleteAsync( category.Id ))>Borrar</button>*@

                                        <a @onclick=@(() => ShowModal(category.Id, true)) class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>
                                        <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(category.Id ))><i class="oi oi-trash" /> Borrar</button>
                                    </td>

                                </tr>
                            }
                        </tbody>
                    </table>
                </Body>
            </GenericList>
        </div>
    </div>

}

@code {
    public List<Category>? Categories { get; set; }
    private int currentPage = 1;
    private int totalPages;
    [CascadingParameter]
    IModalService Modal { get; set; } = default!;


    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task ShowModal(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<CategoryEdit>(string.Empty, new ModalParameters().Add("id", id));
        }
        else
        {
            modalReference = Modal.Show<CategoryCreate>();
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }


    private async Task LoadAsync(int page = 1)
    {
       

        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/categories?page={page}";
            url2 = $"api/categories/totalPages";
        }
        else
        {
            url1 = $"api/categories?page={page}&filter={Filter}";
            url2 = $"api/categories/totalPages?filter={Filter}";
        }

        try
        {
            var responseHppt = await repository.Get<List<Category>>(url1);
            var responseHppt2 = await repository.Get<int>(url2);
            Categories = responseHppt.Response!;
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }


   


    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas eliminar la Categoría?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Sí"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/categories/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var messsage = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", messsage, SweetAlertIcon.Error);
                return;
            }

        }
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }
    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }
}

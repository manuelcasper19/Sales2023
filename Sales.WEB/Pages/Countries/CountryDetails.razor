@page "/countries/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService


@attribute [Authorize(Roles = "Admin")]
@if (country is null)
{

    <div class="spinner" />

}else
{

    <Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPageAsync" />
   <div class="card">
        <div class="card-header d-flex justify-content-center align-items-center">   
                    
            <div class="col-2">
                <a class="btn btn-sm btn-success mx-2" href="/countries"><i class="oi oi-arrow-thick-left"></i></a>
            </div>
            <div class="col-7 text-center">
                <i class="oi oi-globe text-center"></i> Detalle del País: @country.Name
            </div>
            <div class="col-3">
                <a class="btn btn-sm btn-primary float-end" href="/states/create/@country.Id"><i class="oi oi-plus"></i> Agregar Estado/Departamento</a>
            </div>
        </div>
                <div class="card-body">
                    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                        <div>
                            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar Estado/departamento..." @bind-value="Filter" />
                        </div>
                        <div class="mx-1">
                            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                        </div>
                    </div>



    <GenericList MyList="states">

        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>#</th>
                        <th style="width:140px">Estado/Departamento</th>
                        <th style="width:260px">Ciudades</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @{ int i = 0; }
                    @foreach (var state in states!)
                    {
                        i++;
                        <tr>
                            <td>
                                @i
                            </td>
                            <td>
                                @state.Name
                            </td>
                            <td>
                                @state.CitiesNumber
                            </td>
                            <td>
                        @*        <a class="btn btn-info" href="/state/details/@state.Id">Detalles</a>
                                <a class="btn btn-warning" href="/states/edit/@state.Id">Editar</a>
                                <button class="btn btn-danger" @onclick=@( ()=> DeleteAsync( state.Id ))>Borrar</button>*@

                                <a href="/state/details/@state.Id" class="btn btn-info btn-sm"><i class="oi oi-list" /> Detalles</a>
                                <a href="/states/edit/@state.Id" class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>
                                <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(state.Id))><i class="oi oi-trash" /> Borrar</button>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
        </div>
    </div>

}



@code {
    private Country? country;
    private List<State>? states;
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();

    }
    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }


    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/states?id={Id}&page={page}";
            url2 = $"api/states/totalPages?id={Id}";
        }
        else
        {
            url1 = $"api/states?id={Id}&page={page}&filter={Filter}";
            url2 = $"api/states/totalPages?id={Id}&filter={Filter}";
        }

        var responseHppt = await repository.Get<Country>($"api/countries/{Id}");
        var responseHppt2 = await repository.Get<List<State>>(url1);
        var responseHppt3 = await repository.Get<int>(url2);
        country = responseHppt.Response;
        states = responseHppt2.Response;
        totalPages = responseHppt3.Response;


        //var responseHttp = await repository.Get<Country>($"/api/countries/{Id}");
        //if (responseHttp.Error)
        //{
        //    if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
        //    {
        //        navigationManager.NavigateTo("/countries");
        //        return;

        //    }
        //    var message = await responseHttp.GetErrorMessageAsync();
        //    await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
        //    return;
        //}
        //country = responseHttp.Response;
    }
    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas eliminar el estado?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Sí"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/states/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var messsage = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", messsage, SweetAlertIcon.Error);
                return;
            }

        }
        await LoadAsync();
    }
    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }
}



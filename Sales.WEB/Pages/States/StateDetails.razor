@page "/state/details/{StateId:int}"
@using Sales.WEB.Pages.Cities;
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@attribute [Authorize(Roles = "Admin")]
@if (state is null)
{
    <div class="spinner" />
}
else
{
        <Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPageAsync" />
       <div class="card">
        <div class="card-header d-flex justify-content-center align-items-center">            
                 
                 <div class="col-2">
                
                    <a class="btn btn-sm btn-success mx-2" href="/countries/details/@state.CountryId"><i class="oi oi-arrow-thick-left"></i></a>
                 </div>
                <div class="col-8 text-center">
                    <i class="oi oi-globe text-center"></i> Estado/departamento: @state.Name
                </div>
                <div class="col-2">

                <a class="btn btn-sm btn-primary m-1" @onclick=@(() => ShowModal(StateId))><i class="oi oi-plus"></i> Nueva Ciudad</a>
                </div>
                
                </div>
                <div class="card-body">
                    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                        <div>
                            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar ciudad..." @bind-value="Filter" />
                        </div>
                        <div class="mx-1">
                            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                        </div>
                    </div>


    <GenericList MyList="cities">

        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Ciudad</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @{ int i = 0; }
                    @foreach (var city in cities!)
                    {
                        i++;
                        <tr>
                            <td>
                                @i
                            </td>
                            <td>
                                @city.Name
                            </td>
      
                            <td>
                                       
                                <a @onclick=@(() => ShowModal(city.Id, true)) class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>
                                <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(city.Id))><i class="oi oi-trash" /> Borrar</button>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
        </div>
    </div>
}

@code {
    private State? state;
    private List<City>? cities;
    private int currentPage = 1;
    private int totalPages;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    [Parameter]
    public int StateId { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();

    }
    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    //Metodo modal
    private async Task ShowModal(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<CityEdit>(string.Empty, new ModalParameters().Add("CityId", id));
        }
        else
        {
            modalReference = Modal.Show<CityCreate>(string.Empty, new ModalParameters().Add("StateId", id));
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }
    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/cities?id={StateId}&page={page}";
            url2 = $"api/cities/totalPages?id={StateId}";
        }
        else
        {
            url1 = $"api/cities?id={StateId}&page={page}&filter={Filter}";
            url2 = $"api/cities/totalPages?id={StateId}&filter={Filter}";
        }

        var responseHppt = await repository.Get<State>($"api/states/{StateId}");
        var responseHppt2 = await repository.Get<List<City>>(url1);
        var responseHppt3 = await repository.Get<int>(url2);
        state = responseHppt.Response;
        cities = responseHppt2.Response;
        totalPages = responseHppt3.Response;

        //var responseHttp = await repository.Get<State>($"/api/states/{StateId}");
        //if (responseHttp.Error)
        //{
        //    if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
        //    {
        //        navigationManager.NavigateTo("/countries");
        //        return;

        //    }
        //    var message = await responseHttp.GetErrorMessageAsync();
        //    await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
        //    return;
        //}
        //state = responseHttp.Response;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas eliminar la ciudad?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Sí"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/cities/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var messsage = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", messsage, SweetAlertIcon.Error);
                return;
            }

        }
        await LoadAsync();
    }
    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }


}
